version: '3.8'

services:
  # PostgreSQL Database with enhanced security
  db:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-resumator}
      POSTGRES_USER: ${POSTGRES_USER:-resumator}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-resumator}"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      postgres
      -c ssl=on
      -c ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      -c ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      -c log_connections=on
      -c log_disconnections=on
      -c log_statement=mod
      -c shared_preload_libraries=pg_stat_statements

  # Redis with persistence and security
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API with security hardening
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
      target: production
    image: resumator-backend:${VERSION:-latest}
    restart: unless-stopped
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-resumator}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-resumator}
      
      # Redis
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Security
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_EXPIRE_MINUTES=15
      - JWT_REFRESH_EXPIRE_DAYS=30
      
      # AI Service
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-llama3-8b-8192}
      
      # App Configuration
      - DEBUG=false
      - ALLOWED_ORIGINS=https://${DOMAIN:-localhost},https://www.${DOMAIN:-localhost}
      
      # Rate Limiting
      - AI_CALLS_PER_HOUR=10
      - REQUESTS_PER_MINUTE=60
      - AUTH_ATTEMPTS_PER_HOUR=3
      - FILE_UPLOADS_PER_HOUR=5
      
    volumes:
      - app_logs:/app/logs
    networks:
      - backend-network
      - frontend-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Background Worker
  worker:
    image: resumator-backend:${VERSION:-latest}
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-resumator}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-resumator}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - GROQ_API_KEY=${GROQ_API_KEY}
      - GROQ_MODEL_NAME=${GROQ_MODEL_NAME:-llama3-8b-8192}
    volumes:
      - app_logs:/app/logs
    networks:
      - backend-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "-m", "celery", "-A", "app.worker.celery_app", "worker", "--loglevel=info", "--concurrency=2"]
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"

  # Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      target: production
    image: resumator-frontend:${VERSION:-latest}
    restart: unless-stopped
    networks:
      - frontend-network
    depends_on:
      - backend
    security_opt:
      - no-new-privileges:true

  # Caddy Reverse Proxy with automatic HTTPS
  caddy:
    image: caddy:2-alpine
    restart: unless-stopped
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - EMAIL=${LETSENCRYPT_EMAIL:-admin@localhost}
    volumes:
      - ./Caddyfile.prod:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - frontend-network
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp" # HTTP/3
    depends_on:
      - frontend
      - backend

volumes:
  postgres_data:
  redis_data:
  caddy_data:
  caddy_config:
  app_logs:

networks:
  backend-network:
    driver: bridge
    internal: true
  frontend-network:
    driver: bridge
